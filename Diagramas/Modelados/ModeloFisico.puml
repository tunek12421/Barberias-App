@startuml modelo_fisico_simplificado
skinparam backgroundColor #FFFFFE
skinparam class {
    BackgroundColor #F0F8FF
    BorderColor #4169E1
    ArrowColor #4169E1
}

title Modelo Físico Simplificado - Gestión Eficiente de Barberías

' === ENTIDADES CORE SIMPLIFICADAS ===

class clientes {
    <<table>>
    +id_cliente: SERIAL <<PK>>
    --
    email: VARCHAR(100) <<NOT NULL UNIQUE>>
    password_hash: VARCHAR(255) <<NOT NULL>>
    nombre: VARCHAR(50) <<NOT NULL>>
    apellido: VARCHAR(50) <<NOT NULL>>
    telefono: VARCHAR(20)
    dni: VARCHAR(20) <<UNIQUE>>
    direccion: TEXT
    fecha_nacimiento: DATE
    preferencias: JSONB
    puntos_fidelidad: INTEGER <<DEFAULT 0>>
    fecha_primera_visita: DATE
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    ultimo_acceso: TIMESTAMP
}

class administradores {
    <<table>>
    +id_administrador: SERIAL <<PK>>
    --
    email: VARCHAR(100) <<NOT NULL UNIQUE>>
    password_hash: VARCHAR(255) <<NOT NULL>>
    nombre: VARCHAR(50) <<NOT NULL>>
    apellido: VARCHAR(50) <<NOT NULL>>
    telefono: VARCHAR(20)
    dni: VARCHAR(20) <<NOT NULL UNIQUE>>
    nivel_acceso: nivel_acceso_enum <<NOT NULL DEFAULT 'limitado'>>
    permisos_especiales: JSONB
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    ultimo_acceso: TIMESTAMP
}

class barberias {
    <<table>>
    +id_barberia: SERIAL <<PK>>
    --
    id_administrador: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    direccion: TEXT <<NOT NULL>>
    telefono: VARCHAR(20) <<NOT NULL>>
    email: VARCHAR(100) <<NOT NULL>>
    horario_apertura: TIME <<NOT NULL>>
    horario_cierre: TIME <<NOT NULL>>
    latitud: DECIMAL(10,8)
    longitud: DECIMAL(11,8)
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    --
    <<FOREIGN KEY>> (id_administrador) REFERENCES administradores(id_administrador)
}

class barberos {
    <<table>>
    +id_barbero: SERIAL <<PK>>
    --
    email: VARCHAR(100) <<NOT NULL UNIQUE>>
    password_hash: VARCHAR(255) <<NOT NULL>>
    nombre: VARCHAR(50) <<NOT NULL>>
    apellido: VARCHAR(50) <<NOT NULL>>
    telefono: VARCHAR(20)
    dni: VARCHAR(20) <<NOT NULL UNIQUE>>
    id_barberia: INTEGER <<NOT NULL FK>>
    especialidades: TEXT[]
    experiencia_años: INTEGER <<DEFAULT 0>>
    calificacion_promedio: DECIMAL(3,2) <<DEFAULT 0.00>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_ingreso: DATE <<NOT NULL DEFAULT CURRENT_DATE>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    ultimo_acceso: TIMESTAMP
    --
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class servicios {
    <<table>>
    +id_servicio: SERIAL <<PK>>
    --
    id_barberia: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    descripcion: TEXT
    duracion_minutos: INTEGER <<NOT NULL>>
    precio: DECIMAL(10,2) <<NOT NULL>>
    categoria: categoria_servicio_enum <<NOT NULL>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    --
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class barbero_servicios {
    <<table>>
    +id_asignacion: SERIAL <<PK>>
    --
    id_barbero: INTEGER <<NOT NULL FK>>
    id_servicio: INTEGER <<NOT NULL FK>>
    activo: BOOLEAN <<NOT NULL DEFAULT TRUE>>
    --
    <<UNIQUE>> uk_barbero_servicio (id_barbero, id_servicio)
    <<FOREIGN KEY>> (id_barbero) REFERENCES barberos(id_barbero) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_servicio) REFERENCES servicios(id_servicio) ON DELETE CASCADE
}

class reservas {
    <<table>>
    +id_reserva: SERIAL <<PK>>
    --
    id_cliente: INTEGER <<NOT NULL FK>>
    id_barbero_servicio: INTEGER <<NOT NULL FK>>
    fecha_hora: TIMESTAMP <<NOT NULL>>
    duracion_estimada: INTEGER <<NOT NULL>>
    precio_acordado: DECIMAL(10,2) <<NOT NULL>>
    estado: estado_reserva_enum <<NOT NULL DEFAULT 'pendiente'>>
    notas_cliente: TEXT
    notas_barbero: TEXT
    fecha_creacion: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    fecha_confirmacion: TIMESTAMP
    fecha_completada: TIMESTAMP
    --
    <<FOREIGN KEY>> (id_cliente) REFERENCES clientes(id_cliente) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_barbero_servicio) REFERENCES barbero_servicios(id_asignacion) ON DELETE CASCADE
}

class promociones {
    <<table>>
    +id_promocion: SERIAL <<PK>>
    --
    id_barberia: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    descripcion: TEXT
    descuento_porcentaje: DECIMAL(5,2)
    descuento_monto: DECIMAL(10,2)
    fecha_inicio: DATE <<NOT NULL>>
    fecha_fin: DATE <<NOT NULL>>
    max_usos: INTEGER
    usos_actuales: INTEGER <<DEFAULT 0>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    --
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class calificaciones {
    <<table>>
    +id_calificacion: SERIAL <<PK>>
    --
    id_reserva: INTEGER <<NOT NULL UNIQUE FK>>
    puntuacion_servicio: INTEGER <<NOT NULL>>
    puntuacion_barbero: INTEGER <<NOT NULL>>
    comentario: TEXT
    fecha_calificacion: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    --
    <<FOREIGN KEY>> (id_reserva) REFERENCES reservas(id_reserva) ON DELETE CASCADE
}

' === RELACIONES SIMPLIFICADAS ===
administradores ||--o{ barberias : "administra"
barberias ||--o{ barberos : "emplea"
barberias ||--o{ servicios : "ofrece"
barberias ||--o{ promociones : "publica"

barberos ||--o{ barbero_servicios : "puede_realizar"
servicios ||--o{ barbero_servicios : "asignado_a"

clientes ||--o{ reservas : "realiza"
barbero_servicios ||--o{ reservas : "es_reservado"

reservas ||--o| calificaciones : "puede_tener"

@enduml
