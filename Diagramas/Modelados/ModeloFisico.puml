@startuml modelo_fisico_simplificado
skinparam backgroundColor #FFFFFE
skinparam class {
    BackgroundColor #F0F8FF
    BorderColor #4169E1
    ArrowColor #4169E1
}

title Modelo Físico Simplificado - Gestión Eficiente de Barberías

' === ENTIDADES CORE SIMPLIFICADAS ===

class usuarios {
    <<table>>
    +id_usuario: SERIAL <<PK>>
    --
    email: VARCHAR(100) <<NOT NULL UNIQUE>>
    password_hash: VARCHAR(255) <<NOT NULL>>
    nombre: VARCHAR(50) <<NOT NULL>>
    apellido: VARCHAR(50) <<NOT NULL>>
    telefono: VARCHAR(20)
    rol: usuario_rol_enum <<NOT NULL>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    ultimo_acceso: TIMESTAMP
    --
    <<INDEX>> idx_usuarios_email
    <<INDEX>> idx_usuarios_rol
    <<INDEX>> idx_usuarios_estado
}

class clientes {
    <<table>>
    +id_cliente: SERIAL <<PK>>
    --
    id_usuario: INTEGER <<NOT NULL UNIQUE FK>>
    dni: VARCHAR(20) <<UNIQUE>>
    direccion: TEXT
    fecha_nacimiento: DATE
    preferencias: JSONB
    puntos_fidelidad: INTEGER <<DEFAULT 0>>
    fecha_primera_visita: DATE
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    --
    <<INDEX>> idx_clientes_usuario
    <<INDEX>> idx_clientes_dni
    <<INDEX>> idx_clientes_estado
    <<INDEX>> idx_clientes_puntos
    <<CHECK>> chk_puntos_fidelidad >= 0
    <<FOREIGN KEY>> (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
}

class barberias {
    <<table>>
    +id_barberia: SERIAL <<PK>>
    --
    id_admin: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    direccion: TEXT <<NOT NULL>>
    telefono: VARCHAR(20) <<NOT NULL>>
    email: VARCHAR(100) <<NOT NULL>>
    horario_apertura: TIME <<NOT NULL>>
    horario_cierre: TIME <<NOT NULL>>
    latitud: DECIMAL(10,8)
    longitud: DECIMAL(11,8)
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_registro: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    --
    <<INDEX>> idx_barberias_admin
    <<INDEX>> idx_barberias_estado
    <<INDEX>> idx_barberias_ubicacion (latitud, longitud)
    <<CHECK>> chk_horario_valido (horario_apertura < horario_cierre)
    <<FOREIGN KEY>> (id_admin) REFERENCES usuarios(id_usuario)
}

class barberos {
    <<table>>
    +id_barbero: SERIAL <<PK>>
    --
    id_usuario: INTEGER <<NOT NULL UNIQUE FK>>
    id_barberia: INTEGER <<NOT NULL FK>>
    especialidades: TEXT[]
    experiencia_años: INTEGER <<DEFAULT 0>>
    calificacion_promedio: DECIMAL(3,2) <<DEFAULT 0.00>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    fecha_ingreso: DATE <<NOT NULL DEFAULT CURRENT_DATE>>
    --
    <<INDEX>> idx_barberos_usuario
    <<INDEX>> idx_barberos_barberia
    <<INDEX>> idx_barberos_estado
    <<INDEX>> idx_barberos_calificacion
    <<INDEX>> idx_barberos_especialidades (especialidades) USING GIN
    <<CHECK>> chk_calificacion_range (calificacion_promedio BETWEEN 0.00 AND 5.00)
    <<CHECK>> chk_experiencia_años >= 0
    <<FOREIGN KEY>> (id_usuario) REFERENCES usuarios(id_usuario) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class servicios {
    <<table>>
    +id_servicio: SERIAL <<PK>>
    --
    id_barberia: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    descripcion: TEXT
    duracion_minutos: INTEGER <<NOT NULL>>
    precio: DECIMAL(10,2) <<NOT NULL>>
    categoria: categoria_servicio_enum <<NOT NULL>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    --
    <<INDEX>> idx_servicios_barberia
    <<INDEX>> idx_servicios_categoria
    <<INDEX>> idx_servicios_estado
    <<INDEX>> idx_servicios_precio
    <<CHECK>> chk_duracion_minutos BETWEEN 15 AND 180
    <<CHECK>> chk_precio > 0
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class barbero_servicios {
    <<table>>
    +id_asignacion: SERIAL <<PK>>
    --
    id_barbero: INTEGER <<NOT NULL FK>>
    id_servicio: INTEGER <<NOT NULL FK>>
    activo: BOOLEAN <<NOT NULL DEFAULT TRUE>>
    --
    <<INDEX>> idx_asignaciones_barbero
    <<INDEX>> idx_asignaciones_servicio
    <<INDEX>> idx_asignaciones_activo
    <<UNIQUE>> uk_barbero_servicio (id_barbero, id_servicio)
    <<FOREIGN KEY>> (id_barbero) REFERENCES barberos(id_barbero) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_servicio) REFERENCES servicios(id_servicio) ON DELETE CASCADE
}

class reservas {
    <<table>>
    +id_reserva: SERIAL <<PK>>
    --
    id_cliente: INTEGER <<NOT NULL FK>>
    id_barbero: INTEGER <<NOT NULL FK>>
    id_servicio: INTEGER <<NOT NULL FK>>
    fecha_hora: TIMESTAMP <<NOT NULL>>
    duracion_estimada: INTEGER <<NOT NULL>>
    precio_acordado: DECIMAL(10,2) <<NOT NULL>>
    estado: estado_reserva_enum <<NOT NULL DEFAULT 'pendiente'>>
    notas_cliente: TEXT
    notas_barbero: TEXT
    fecha_creacion: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    fecha_confirmacion: TIMESTAMP
    fecha_completada: TIMESTAMP
    --
    <<INDEX>> idx_reservas_cliente
    <<INDEX>> idx_reservas_barbero
    <<INDEX>> idx_reservas_servicio
    <<INDEX>> idx_reservas_fecha_hora
    <<INDEX>> idx_reservas_estado
    <<INDEX>> idx_reservas_fecha_creacion
    <<CHECK>> chk_fecha_futura (fecha_hora > fecha_creacion)
    <<CHECK>> chk_duracion_estimada > 0
    <<CHECK>> chk_precio_acordado > 0
    <<FOREIGN KEY>> (id_cliente) REFERENCES clientes(id_cliente) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_barbero) REFERENCES barberos(id_barbero) ON DELETE CASCADE
    <<FOREIGN KEY>> (id_servicio) REFERENCES servicios(id_servicio) ON DELETE CASCADE
}

class promociones {
    <<table>>
    +id_promocion: SERIAL <<PK>>
    --
    id_barberia: INTEGER <<NOT NULL FK>>
    nombre: VARCHAR(100) <<NOT NULL>>
    descripcion: TEXT
    descuento_porcentaje: DECIMAL(5,2)
    descuento_monto: DECIMAL(10,2)
    fecha_inicio: DATE <<NOT NULL>>
    fecha_fin: DATE <<NOT NULL>>
    max_usos: INTEGER
    usos_actuales: INTEGER <<DEFAULT 0>>
    estado: estado_enum <<NOT NULL DEFAULT 'activo'>>
    --
    <<INDEX>> idx_promociones_barberia
    <<INDEX>> idx_promociones_fechas
    <<INDEX>> idx_promociones_estado
    <<CHECK>> chk_fechas_promocion (fecha_fin >= fecha_inicio)
    <<CHECK>> chk_descuentos (
        (descuento_porcentaje IS NOT NULL AND descuento_porcentaje BETWEEN 0 AND 100) OR
        (descuento_monto IS NOT NULL AND descuento_monto > 0)
    )
    <<CHECK>> chk_max_usos (max_usos IS NULL OR max_usos > 0)
    <<CHECK>> chk_usos_actuales (usos_actuales >= 0)
    <<FOREIGN KEY>> (id_barberia) REFERENCES barberias(id_barberia) ON DELETE CASCADE
}

class calificaciones {
    <<table>>
    +id_calificacion: SERIAL <<PK>>
    --
    id_reserva: INTEGER <<NOT NULL UNIQUE FK>>
    puntuacion_servicio: INTEGER <<NOT NULL>>
    puntuacion_barbero: INTEGER <<NOT NULL>>
    comentario: TEXT
    fecha_calificacion: TIMESTAMP <<NOT NULL DEFAULT NOW()>>
    --
    <<INDEX>> idx_calificaciones_reserva
    <<INDEX>> idx_calificaciones_fecha
    <<INDEX>> idx_calificaciones_puntuacion
    <<CHECK>> chk_puntuacion_servicio BETWEEN 1 AND 5
    <<CHECK>> chk_puntuacion_barbero BETWEEN 1 AND 5
    <<FOREIGN KEY>> (id_reserva) REFERENCES reservas(id_reserva) ON DELETE CASCADE
}

' === TIPOS ENUMERADOS SIMPLIFICADOS ===
note as enum_types
**TIPOS ENUMERADOS:**

**usuario_rol_enum:** 'cliente', 'barbero', 'admin'
**estado_enum:** 'activo', 'inactivo'
**categoria_servicio_enum:** 'corte', 'barba', 'tratamiento', 'combo'
**estado_reserva_enum:** 'pendiente', 'confirmada', 'completada', 'cancelada'
end note

' === RELACIONES SIMPLIFICADAS ===
usuarios ||--o{ clientes : "puede_ser"
usuarios ||--o{ barberos : "puede_ser"
usuarios ||--o{ barberias : "administra"

barberias ||--o{ barberos : "emplea"
barberias ||--o{ servicios : "ofrece"
barberias ||--o{ promociones : "publica"

barberos ||--o{ barbero_servicios : "puede_realizar"
servicios ||--o{ barbero_servicios : "asignado_a"

clientes ||--o{ reservas : "realiza"
barberos ||--o{ reservas : "atiende"
servicios ||--o{ reservas : "es_reservado"

reservas ||--o| calificaciones : "puede_tener"

note bottom
  **MODELO FÍSICO SIMPLIFICADO - POSTGRESQL**
  
  **Objetivo:** Gestión eficiente de servicios de barbería, reservas, 
  usuarios y promociones, facilitando la conexión entre barberos y clientes.
  
  **Características Simplificadas:**
  • Estructura mínima pero funcional
  • Enfoque en funcionalidades core
  • Integridad referencial garantizada
  • Índices optimizados para consultas frecuentes
  • Constraints de negocio esenciales
  • Tipos enumerados simplificados
  • Sin redundancias innecesarias
  
  **Entidades Core:**
  • usuarios (base de autenticación)
  • clientes (datos específicos del cliente)
  • barberias (establecimientos)
  • barberos (especialistas)
  • servicios (catálogo por barbería)
  • reservas (citas y gestión)
  • promociones (ofertas)
  • calificaciones (feedback)
  
  **Beneficios de Simplificación:**
  • Menos complejidad de mantenimiento
  • Mejor rendimiento en consultas
  • Estructura clara y escalable
  • Facilita desarrollo e integración
  • Cumple todos los objetivos principales
end note

@enduml
