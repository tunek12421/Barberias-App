@startuml modelo_logico_relacional
skinparam backgroundColor #FFFFFE
skinparam class {
    BackgroundColor #E1F5E1
    BorderColor #4CAF50
    ArrowColor #4CAF50
}
skinparam note {
    BackgroundColor #E8F5E8
    BorderColor #66BB6A
}

title Modelo Lógico Relacional - Plataforma de Barberías

' === TABLAS PRINCIPALES ===
class usuarios {
    <<table>>
    +id_usuario: PK
    --
    email: AK
    password_hash
    rol
    fecha_registro
    estado
    ultimo_acceso
}

class clientes {
    <<table>>
    +id_cliente: PK
    --
    id_usuario: FK
    nombre
    apellido
    telefono
    email_contacto: AK
    preferencias
    puntos_fidelidad
    fecha_primera_visita
    estado_cliente
}

class administradores_barberia {
    <<table>>
    +id_admin: PK
    --
    id_usuario: FK
    nombre
    apellido
    telefono
    email_contacto: AK
    nivel_acceso
    fecha_asignacion
    estado_admin
}

class barberias {
    <<table>>
    +id_barberia: PK
    --
    id_admin: FK
    codigo_barberia: AK
    nombre
    descripcion
    direccion
    telefono
    email
    horario_apertura
    horario_cierre
    estado
    fecha_registro
}

class barberos {
    <<table>>
    +id_barbero: PK
    --
    id_usuario: FK
    id_barberia: FK
    codigo_empleado: AK
    nombre
    apellido
    telefono
    dni: AK
    email_contacto: AK
    especialidad
    experiencia_años
    fecha_ingreso
    foto_perfil
    biografia
    estado_barbero
    calificacion_promedio
}

class servicios {
    <<table>>
    +id_servicio: PK
    --
    id_barberia: FK
    codigo_servicio: AK
    nombre
    descripcion
    duracion_minutos
    precio
    categoria
    estado_servicio
}

class barberos_servicios {
    <<table>>
    +id_asignacion: PK
    --
    id_barbero: FK
    id_servicio: FK
    fecha_asignacion
    precio_especial
    activo
}
note right of barberos_servicios
  **Tabla de asociación**
  Resuelve relación M:N
  entre Barberos y Servicios
end note

class horarios_barbero {
    <<table>>
    +id_horario: PK
    --
    id_barbero: FK
    dia_semana
    hora_inicio
    hora_fin
    disponible
}

class reservas {
    <<table>>
    +id_reserva: PK
    --
    id_cliente: FK
    id_asignacion: FK
    codigo_reserva: AK
    fecha_hora
    estado_reserva
    notas_cliente
    notas_barbero
    precio_final
    fecha_creacion
}

class calificaciones {
    <<table>>
    +id_calificacion: PK
    --
    id_reserva: FK NN
    puntuacion_servicio
    puntuacion_barbero
    puntuacion_barberia
    comentario
    fecha_calificacion
    visible
}

class promociones {
    <<table>>
    +id_promocion: PK
    --
    id_barberia: FK
    codigo_promocion: AK
    titulo
    descripcion
    tipo_descuento
    valor_descuento
    fecha_inicio
    fecha_fin
    max_usos
    usos_actuales
    estado_promocion
}

' === RELACIONES REFERENCIALES ===
usuarios ||--o{ clientes : "registra_como"
usuarios ||--o{ administradores_barberia : "registra_como"
usuarios ||--o{ barberos : "registra_como"

administradores_barberia ||--o{ barberias : "administra"

barberias ||--o{ barberos : "emplea"

barberias ||--o{ servicios : "ofrece"

barberos ||--o{ barberos_servicios : "puede_realizar"
servicios ||--o{ barberos_servicios : "es_realizado_por"

barberos ||--o{ horarios_barbero : "define_horario"

clientes ||--o{ reservas : "solicita"
barberos_servicios ||--o{ reservas : "asigna_servicio"

reservas ||--o| calificaciones : "genera_calificacion"

barberias ||--o{ promociones : "publica"

note top
  **MODELO LÓGICO RELACIONAL**
  
  **Características del Modelo Lógico:**
  • Esquema relacional normalizado
  • Definición de llaves primarias (PK)
  • Definición de llaves foráneas (FK)
  • Llaves alternativas (AK) identificadas
  • Restricciones de integridad
  • Cardinalidades específicas
  • Tablas de asociación para relaciones M:N
  • No especifica tipos de datos detallados
  
  **Normalización aplicada:**
  • 1FN: Eliminación de grupos repetitivos
  • 2FN: Eliminación de dependencias parciales
  • 3FN: Eliminación de dependencias transitivas
end note

note bottom
  **INTEGRIDAD REFERENCIAL:**
  
  • Todas las FK mantienen integridad
  • Restricciones de dominio aplicadas
  • Sin ciclos en dependencias
  • Entidades débiles identificadas
  • Cardinalidades respetadas
  
  **Convenciones:**
  PK = Primary Key (Llave Primaria)
  FK = Foreign Key (Llave Foránea)  
  AK = Alternate Key (Llave Alternativa)
  NN = Not Null (No Nulo)
end note

@enduml